# If not running interactively, don't do anything
[ -z "$PS1" ] && return


#
# Triggers
#

## SCREEN {{{

# When a zsh shell is opened in a pwe, trigger a setpwe
AMA_initpwe()
{
    pwd=$(pwd)
    pwd=${pwd#/users/rchossar/pwe/}
    pwd=${pwd%%/*}
    test -n "${pwd}" && setpwe $pwd

}
AMA_initpwe # Trigger it when you have a new shell

# Updates the env vars for SSH agent forwarding and X forwarding
export VARSLOC=~/.screen_env_vars
SCR_grabvars()
{
    for x in SSH_AGENT_PID SSH_AUTH_SOCK DISPLAY; do
	echo export $x=${(P)x:q}
    done >! $VARSLOC
}
SCR_sourcevars()
{
    [ -f $VARSLOC ] && source $VARSLOC
}
SCR_grabvars # Trigger it when I ssh into my account
## }}}

#
# Options de shell
#



case $TERM in
    xterm*)
        precmd ()  {print -Pn "\e]0;[%n@%m: %~]\a"} ; # xterm's title is more or less [$USERNAME@HOSTNAME: %PWD]
        preexec () {print -Pn "\e]0;$1 (started at %t) [%n@%m: %~]\a"}; # xterm's title is the running command and its arguments, then its starting hour, then the usual title
        ;;
esac # source : http://www.ibiblio.org/pub/Linux/docs/HOWTO/translations/fr/html-1page/Xterm-Title.html

setopt extendedhistory
unsetopt correctall ; unsetopt correct # Finally, stop (mis-)correcting the commands I type >_<



#
# Environment Variables
#

export PATH="/opt/gnome/bin:/data/softs/bin:${PATH}"
export HISTSIZE=5000
export HISTFILE="$HOME/.zsh_history"
export SAVEHIST=$HISTSIZE
export EDITOR=vim
export VIM='/data/softs/vim-7.2/share/vim/vim72'

export CVSROOT=":pserver:rchossar@ncecvsgco.nce.amadeus.net:/cvsgco/asl_ngd"
export CVSEDITOR=vim

RED=$'%{\e[1;31m%}'
GREEN=$'%{\e[1;32m%}'
YELLOW=$'%{\e[1;33m%}'
PURPLE=$'%{\e[1;35m%}'
BLUE=$'%{\e[1;34m%}'
WHITE2=$'%{\e[0;00m%}'
WHITE=$'%{\e[0;37m%}'

EXT_RED=$'%{\e[38;5;124m%}'
EXT_GREEN=$'%{\e[38;5;28m%}'
EXT_ORANGE=$'%{\e[38;5;202m%}'
EXT_PURPLE=$'%{\e[38;5;89m%}'

# Prompt display/colors
case $HOST in
    "lonlnx29" | "lonlnx39") 
	HOST_COLOR=${PURPLE} ;
	export PATH="${HOME}/bin:${PATH}";;
    "lonlnx06") HOST_COLOR=${GREEN} ;;
    *) HOST_COLOR=${RED} ;;
esac

case "$TERM" in
#setopt PROMPT_SUBST
#PROMPT='%{$(pwd|grep --color=always /)%${#PWD}G%} %(!.%F{red}.%F{cyan})%n%f@%F{yellow}%m%f%(!.%F{red}.)%#%f '

    xterm*|screen*) PS1="${BLUE}%n${WHITE}@${HOST_COLOR}%m:${YELLOW}%~${RED} %# ${WHITE2}";;
    xterm-color|Eterm) PS1="${HOST_COLOR}%n@%m %# ${WHITE}";;
    *) PS1="${GREEN}%n${WHITE}@${BLUE}%m %# ${WHITE}";;
esac



#
# Alias
#

## General aliases ##
#-------------------#

# Usual commands
alias ls='ls --color=auto'
alias l='ls'
alias ll='ls -la'
alias sl=ls

alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -i"

alias vim="vim -X" # Don't use X cause there are issues after screen detach
alias gvim="vim"
alias vi="vim"
alias view="vim -R"

# Useful to use wget on the Internet
alias prox='https_proxy=lonisa1.lon.amadeus.net:8080 http_proxy=lonisa1.lon.amadeus.net:8080 ftp_proxy=lonisa1.lon.amadeus.net:8080'
alias lsp='ls --color=always |sed "s/\([0-9]\{8\}\).*/\1 $(tput sgr0)-- $(tput setaf 5)winaproach:\/\/\1$(tput sgr0)/"'

# Conf
alias vimz="vim ~/.zshrc.rchossar"
alias soz="source ~/.zshrc.rchossar"
alias vimrc="vim ~/.vimrc"
alias vimv="vim ~/.vimrc"
alias grep="grep --color"

alias sr="screen -r"
alias sls="screen -ls"
alias SPTR="screen -c ~/.screenrc.ptr -S "
alias SCR="screen -c ~/.screenrc.cr -S "
alias SRGR="screen -c ~/.screenrc.rgr -S "
alias STR="screen -c ~/.screenrc.tr -S "


## Amadeus-related ##
#-------------------#

# Go to pwe home and setpwe
alias p='pwe && setpwe'
alias xm='xmessage "done"'

alias python=/opt/Python-2.6/bin/python

## Bookmarks 

alias plog='HTTP_PROXY="" curl -s http://ngdwiki/wiki/index.php/CM:Log_archiving|grep "<li> lonlnx"|cut -b 10-'

alias tfl='~zwu/prd_monitoring/ETKscripts/indexer/i.pl -key ' # Exact locator
alias tf='~zwu/prd_monitoring/ETKscripts/indexer/ii.pl -key ' # Partial/Ignorecase locator

# Backup Diff - OCR and commit
BDO()
{ #{{{
    if [[ "$2" == "" ]]; then
	rev=1
    else
	rev="$2"
    fi
    setpwe
    pwe
    file="${1%.diff}_OCR${rev}.diff"
    dir=~/diffs/"$(basename $PWD)"
    cp "$1" "${file}"
    mkdir -p "${dir}"
    cp "${file}" "${dir}/" && print copied $file into  $dir
    popd
} #}}}
BDC()
{ #{{{
    if [[ "$2" == "" ]]; then
	rev=1
    else
	rev="$2"
    fi
    setpwe
    pwe
    file="${1%.diff}_commit${rev}.diff"
    dir=~/diffs/"$(basename $PWD)"
    cp "$1" "${file}"
    mkdir -p "${dir}"
    cp "${file}" "${dir}/" && print copied $file into  $dir
    popd
} #}}}

# Modman
alias moduprel='modman up -latest_release'

# All my sequence-of-commands aliases begin with "do"
alias domake='cd ${PWETOP} && gmake clean && modman up && modman repair && gmake -j 12 && cd -'
alias domake_quick_but_do_not_use_it='nice make -s -l4 -j15 NG_DIST=1 DISTCC_HOSTS="lonlnx01/1 lonlnx02/1 lonlnx03/1 lonlnx04/1 lonlnx05/1 lonlnx06/2 lonlnx08/1 lonlnx09/1 lonlnx10/2 lonlnx11/1 lonlnx12/1 lonlnx14/1 lonlnx15/2 lonlnx19/1 lonlnx20/1 lonlnx21/1"'

# Get the diff for all changes made (by F.Royer) - r=no regression - x=no xml - w=no whitespaces
alias cvsdiff='cvsdiff="cvs-$(date +%Y-%m-%d-%H%M%S).diff" ; rm -f cvs.diff && modman mods | while read m filename ; do cvs diff -u -N $filename >>! $cvsdiff ; done ; ln $cvsdiff cvs.diff && mkdir -p ~/diffs/$(basename $PWD)/ && cp $cvsdiff ~/diffs/$(basename $PWD)/'
alias cvsdiffr='cvsdiff="cvs-review-$(date +%Y-%m-%d-%H%M%S).diff" ; rm -f cvs-review.diff && modman mods | grep -v "\.scn$" | while read m filename ; do cvs diff -u -N $filename >>! $cvsdiff ; done ; ln $cvsdiff cvs-review.diff && mkdir -p ~/diffs/$(basename $PWD)/ && cp $cvsdiff ~/diffs/$(basename $PWD)/'
alias cvsdiffrx='cvsdiff="cvs-review-$(date +%Y-%m-%d-%H%M%S).diff" ; rm -f cvs-review.diff && modman mods | grep -v "\.scn$" | grep -v "edifact/\w\+\.xml$" | while read m filename ; do cvs diff -u -N $filename >>! $cvsdiff ; done ; ln $cvsdiff cvs-review.diff && mkdir -p ~/diffs/$(basename $PWD)/ && cp $cvsdiff ~/diffs/$(basename $PWD)/'
alias cvsdiffw='cvsdiff="cvs-$(date +%Y-%m-%d-%H%M%S).diff" ; rm -f cvs.diff && modman mods | while read m filename ; do cvs diff -u -b -B -w -N $filename >>! $cvsdiff ; done ; ln $cvsdiff cvs.diff && mkdir -p ~/diffs/$(basename $PWD)/ && cp $cvsdiff ~/diffs/$(basename $PWD)/'
alias cvsdiffrw='cvsdiff="cvs-review-$(date +%Y-%m-%d-%H%M%S).diff" ; rm -f cvs-review.diff && modman mods | grep -v "\.scn$" | while read m filename ; do cvs diff -u -b -B -w -N $filename >>! $cvsdiff ; done ; ln $cvsdiff cvs-review.diff && mkdir -p ~/diffs/$(basename $PWD)/ && cp $cvsdiff ~/diffs/$(basename $PWD)/'
alias cvsdiffrxw='cvsdiff="cvs-review-$(date +%Y-%m-%d-%H%M%S).diff" ; rm -f cvs-review.diff && modman mods | grep -v "\.scn$" | grep -v "edifact/\w\+\.xml$" | while read m filename ; do cvs diff -u -b -B -w -N $filename >>! $cvsdiff ; done ; ln $cvsdiff cvs-review.diff && mkdir -p ~/diffs/$(basename $PWD)/ && cp $cvsdiff ~/diffs/$(basename $PWD)/'

alias cvsconflictsedit='vim `modmap up | sed -ne "s/^C //p"`'


alias dotags='cd ${PWETOP}; ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ng*'
alias dontt='ntt s; ntt vsy; ntt clean; ntt config; ntt loadbasedb; ntt t'
alias ntts='ntt s && ntt vsy'


## Search Aliases

# Search source files (must be in ng???/src/)
gsrc() { grep $@ **^CVS/*(pp|i|conf|xml|entity|package) }
gnsrc() { grep -n $@ **^CVS/*(pp|i|conf|xml|entity|package) }

#gcpp() { grep -nir '--include=*.cpp' "$1" "${2:-.}" 2> /dev/null ; }
#ghpp() { grep -nir '--include=*.cpp' "$1" "${2:-.}" 2> /dev/null ; }
#grepcode() { grep -nir '--include=*.hpp' '--include=*.cpp' "$1" "${2:-.}" 2> /dev/null ; }

# SCN - ${var:-default} is eval'd to default if var not set with zsh
grepscn() { grep -nira '--include=*.scn' "$1" "${2:-.}" 2> /dev/null ; } # rgr scn can be considered as txt

findcpp() { find . -follow -iname "*$1*.cpp" 2> /dev/null ; }

# This is this complicated because of symlinks
#findmsg() { find $PWETOP -follow -path './ng???/src/server' -maxdepth 5 -name 'Svr*.cpp' -exec grep -nH $1 {} \; }
findmsg() { 
    echo "-- Interfaces (Normal + Reverse) --" && grep -nH "$1" $PWETOP/ng???/src/serviceinterface/*.conf|grep -v "Grp"
    echo "-- Normal Services (we receive the request) --" && grep -nH "$1" $PWETOP/ng???/src/server/Svr*.cpp 
    echo "-- Reverse Services (it sends the request) --" && grep -nH "$1" $PWETOP/ng???/src/servicereverse/Svc*.hpp 
}

backuphome() { cp "$1" ~/".bak_$(basename "$1")_$(date +%H:%M:%S_%d-%m-%Y).bak" } 

# NTT

# adding logs for ntt just not to be screwed again and again
unalias ntt 2> /dev/null # not sure if useful but...
function my_ntt() {
       log_file="${HOME}/ntt_logs.txt"; touch "${log_file}";
       log="$(date +%Y/%m/%d\ %H\:%M\:%S) : ntt $@ ($PWD) [BEGIN]";
       echo "${log}" | tee -a "${log_file}";
       ntt "$@"; ret="$?"
       echo "${log}";
       log="$(date +%Y/%m/%d\ %H\:%M\:%S) : ntt $@ ($PWD) [END (${ret})]";
       echo "${log}" | tee -a "${log_file}";
}
alias ntt='my_ntt'

# Backend logs
function vilogs() {
    view *$1
}
    


## Copy aliases 

# Copy flog in log machine
alias flog_repairPROD='scp -r ~/cvs/cmware/tools/stg $CML_ONCALL_USER@lgsprdcml:'

alias copy_from_prdcml='rsync -Pir prchossa@lgsprdcml:dyn_move_to_lonlnx/ ~/dyn_logs_from_lgsprdcml/ && echo "Logs moved to dyn_logs_from_lgsprdcml/"'
alias copy_from_uatcml='rsync -Pir prchossa@lgsuatcml:dyn_move_to_lonlnx/ ~/dyn_logs_from_lgsprdcml/ && echo "Logs moved to dyn_logs_from_lgsprdcml/"'


#
# TODO entre telle et telle date
# greprecentlogs() { date="$(date +\^%Y/%m/%d\ %H\:%M\:%S -d "${1:-60} seconds ago")"; shift; echo "${date}"; grep "${date}" "$@"}










#
# Fonctions
#


#
# Divers
#

#
# Keys
#

# Handy shortcuts
bindkey -s '~|' '|cut -d: -f1|uniq' # Get list of files from grep
bindkey -s '~&&' '&& xmessage "SUCCESS" || xmessage "FAILURE"' # xmessage
bindkey -s '~T' '|while read i; do ntt t $i; done'
bindkey -s '~A' '|while read i; do ntt accept $i; done'

# Some fixes
bindkey '^[[1~' beginning-of-line       # Home
bindkey '^[[4~' end-of-line             # End
bindkey '^[[7~' beginning-of-line       # Home
bindkey '^[[8~' end-of-line             # End
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line
bindkey '^[[3~' delete-char


# Kill ntt (by R.Chossart) (sometimes, many warnings, but it works...) // I do not use it anymore. Check in a few month if the file is filled
killallntt() {
    psmy|awk '{print $8}'|grep '\(^otf\|^sei\|NTTServer\)'|while read process; do
	echo "Killing $process..."
	echo $(date) >> ~/killallntt.log
	killall $process
    done
}


##################################
# Copied from a zshrc on the net #
##################################

zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'

# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
    
# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
# on processes completion complete all user processes
# zstyle ':completion:*:processes' command 'ps -au$USER'

## add colors to processes for kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#zstyle ':completion:*:processes' command 'ps ax -o pid,s,nice,stime,args | sed "/ps/d"'
zstyle ':completion:*:*:kill:*:processes' command 'ps --forest -A -o pid,user,cmd'
zstyle ':completion:*:processes-names' command 'ps axho command' 
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'

